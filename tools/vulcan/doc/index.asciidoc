Vulcan documentation
====================

Description
-----------

Vulcan is a command line tool that reads a configuration file with a list of url's, downloads the files to a cache folder, and then copies or extracts the files to a given location.

Vulcan could become a full dependency management system.

Features
--------

* It downloads files through HTTP, HTTPS and from Artifactory.
* It chooses the correct files based on some contraints: the operating system during runtime.
* The configuration is a tree of definitions of dependencies. The definitions can use any set of properties and can define default values for others. The properties in the definitions can reuse the values of other properties with placeholders.
* It supports offline access because the downloaded files are kept in a cache folder.
* It optionally checks the file "SPOTIFY_PACKAGE_INFO" to detect if the dependencies must be downloaded or extracted again.
* It can copy the files or extract zip files.

Planned and Unplanned New Features
----------------------------------

* The tool should reuse a local file instead of downloading it.
* the tool should detect the version of the files and place them in the proper place, useful for "artifact dependencies" in TeamCity.
* The tool should receieve a list of configuration files and allow to override properties of the dependencies, so different versions or url's would be used.
* The tool should allow to authenticate the users.
* The tool could be extended to to manage more complex protocols or source locations, like "teamcity", "discover" or “git”.
* The tool could implement some cleanup policy for the cache.
* The tool could manage transitive dependencies and resolve version conflicts.

Configuration file
------------------

The definition of a dependency is described by a set of key value properties. It can contain as many properties as needed. Placeholders can be used to expand the values of other properties. Any property can expand any other property, the only restriction is to do not have circular dependencies. Some of the properties will be meaningful for the tool ("id" or "url", i.e.), and the others will make the life easier, will have any name or will not be used at all (i.e. “description” or any informative field).

The definitions are grouped in trees: the leaves are concrete definitions of the dependencies while the non leaves nodes are abstract definitions that provide default values for the concrete ones described in their children.

The format of each dependency is:

 {
   <property_name_1>: <value_1>,
   <property_name_2>: <value_2>,
   ...,
   "~": [
     {
       <name>: <value>,
       "~": ...
     },...
   ]
 }

The symbol “~” means an array of children, the subdefinitions. If a key is defined with this value then the definition is abstract and provides default values for the children, otherwise it is a concrete definition. The symbol “~” has been chosen because of its high value in the ascii table (126) and it will be the last one if the keys are sorted. Many tools to pretty print JSON files are able to sort the keys.

The syntax “${name}” in the values of the properties is used to expand the values of other properties. It is implemented by the python Templates module.

The configuration file, called ‘PROJECT’ by default, is a JSON file that contains a map with properties. In the future this root map may contain other properties.

The root must include a "dependencies" entry with an array of the roots of all trees of definitions as described above.

Example of PROJECT file:

 {
   “dependencies”: [
     {
       "id": "cef",
       "version": "..."
     },
     {
       "id": "openssl",
       "version": "..."
     }
   ]
 }

Other configuration
-------------------

The tool uses a "VULCAN_FOLDER" folder to store some data in runtime. By default this VULCAN_FOLDER is "./.vulcan", a subfolder of the current working directory.

It can be modified with the environment variable "$VULCAN_FOLDER".

It contains the cache and it could contain additional configuration files in the future.

Command line options
--------------------

The tool supports these options:

* -f <filename>: it allows to change the name of the configuration file. It is "PROJECT" by default.
* -v: the tool will be more verbose.
* -D <name>=<value>: it allows to override the value of the properties. The property will be avialable in all dependency definitions. The value of the properties in the files will be ignored.

Properties of the definitions
-----------------------------

The tool manages these types of identifiers:

* The identifier of the dependency. Example: "cef".
* The identifier of the version of the dependency. Example: "cef 1.2.3".
* The identifiers for the set of restrictions (the operating system). Example: "linux".

The tool knows about these properties:

* "id": the identifier of the dependency. This matches the first type of identifiers. It is used to group the available versions of the dependency. Only one definition will be selected for any given "id".
* "os": the operating system the package is meant for. This belongs to the third type of identifiers.
* "current_os": the operating system in runtime. "os" is compared with this value. "current_os" can be overriden in the command line.
* "type": the type of the dependency. This type allows to extend and plug in more features in the future.
* "ignore": if "true", the dependency is ignored as it was not defined.
* "force": if "true", the dependency applies always and the constraints are ignored.
* "current_os": the name of the operating system during runtime.

The values for "os" are: "linux", "osx" and "win32".

Only the type "url" is supported at the moment. In the future it could be extended to "teamcity", “artifactory”, “git” or other more complex protocols.

Other properties will be read by the specified "type" plugin.
Any other properties can be defined by the user.
Any property can be used as placeholder as described above.

The value of any property can be overriden in the command line with the "-D" option.

The algorithm
-------------

The algorithm is described here for disambiguation purposes.

The tool follows this algorithm:

1. To gather all definitions:
* The configuration file is read.
* The trees of definitions are traversed resolving the plain list of dependencies and applying the default values. No property expansion is done.

2. To merge the definitions:
* The plain list of definitions is iterated in the order they were read.
* For every definition the values for "id" and restrictions ("os") are calculated.
* When the values do not match previous values, the definition is considered new.
* When the values match a previous definition, the properties of the definitions are merged into the previous definition.
* The expanded values of the “id”, the restrictions (“os”) and other constant properties ("current_os" and those defined with the "-D" option) are kept, but the values of other expanded properties are ignored so they can be effectively overriden.

3. For every different "id", to select one definition:
* If there are restrictions ("os") but do not apply, the definition is discarded.
* If the set of restrictions is a subset of the contraints of the selected definition, the definition is discarded.
* If the set of restrictions is a superset of the contraints of the selected definition, the definition is selected instead of the previous one.
* If the set of restrictions is not a subset or a superset, it is considered an error.
* If a definition has a property "ignore" set to "true", it is discarded.
* If a definition has a property "force" set to "true", the other definitions will be ignored. There can be only one for a given "id".

4. For every different "id", to process the selected definition:
* the dependency is processed with the plugin specifed by the "type" property.

Dependency Type "url"
---------------------

If the type of the definition is ”url”, these properties are used:

* “url”: the url to download the file from.
* "package_id": the identifier of the version of the dependency. This matches the second type of identifiers. The value is also stored in the packages in a file called SPOTIFY_PACKAGE_INFO. Should not be specifed for "manage"d dependencies.
* "check_package_id": if "true", that is the default, the tool will check the file "SPOTIFY_PACKAGE_INFO" exists and have the proper value, specified by "package_id", both in the working copy before the download and in the downloaded file after it. Not supported for "manage"d dependencies, where it defaults to "false".
* “action”: it can be "copy", "extract" or "manage". If "copy", the file will be copy from the cache to the "path". If "extract", the file will be considered to be an archive and the contents will be extracted. "manage" is like "extract" but it extracts files into the cache directory.
* “format”: the format of the file when it needs to be extracted.
* “path”: the path where the package must be copied or extracted. It is relative to the configuration file. Should not be specified for "manage"d dependencies.

The "url" property supports the schemes "http" and "https". No usernames and passwords can be specified at the moment. When downloading from "artifactory.spotify.net" through "https" the user "teamcity" and its password are used.

The "package_id" is used to detect if the dependency in the "path" location needs to be downloaded, copied or extracted or it can be avoided.

If the "action" is "copy", then the property "path" will be considered a folder if it ends with a slash, and a file otherwise. If it is a folder, the file name will be the basename of the path of the url.

The format is “zip” unless the property "format" is defined. The tool only supports "zip" files at the moment.

The tool will download the file to a cache folder. Then it will copy or extract to the specified "path". So it supports offline access.

The cache
---------

The tool creates, writes and reads a subfolder "cache" inside the VULCAN_FOLDER.

This cache is used to avoid repetitive downloads and to support offline access.

Users are encouraged to override the $VULCAN_FOLDER environment variable to some path outside the working copy (like "~/.vulcan" or "/tmp/<username>/vulcan") to avoid "git clean" to remove the cached files.

The "url" plugin uses entries in the cache with this format: "<basename_of_the_path_of_the_url>-<sha1_of_the_url>/<basename_of_the_path_of_the_url>"

There is no cleanup policy at the moment.

Examples
--------

One library, arguments needed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The command line would be: "$ vulcan.py -D BOOST_PACKAGE_INFO=... -D BOOST_BINARY_DEPENDENCY=..."

  {
   "dependencies": [
    {
     "artifactory": "https://artifactory.spotify.net/artifactory",
     "client_artifactory": "${artifactory}/client-infrastructure",
     "~": [
      {
       "id": "boost",
       "package_id": "${BOOST_PACKAGE_INFO}",
       "path": "binaries/boost",
       "type": "url",
       "url": "${client_artifactory}/${BOOST_BINARY_DEPENDENCY}"
      }
     ]
    }
   ]
  }

One managed library, no arguments needed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The command line would be: "$ vulcan.py"

  {
   "dependencies": [
    {
     "artifactory": "https://artifactory.spotify.net/artifactory",
     "client_artifactory": "${artifactory}/client-infrastructure",
     "~": [
      {
       "id": "boost",
       "type": "url",
       "action": "manage",
       "url": "${client_artifactory}/boost/1_53_0/boost_1_53_0-linux-gcc-x86_64-static_libs.zip"
      }
     ]
    }
   ]
  }

One library, tool decides based on operating system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The command line would be: "$ vulcan.py"

 {
  "dependencies": [
   {
    "artifactory": "https://artifactory.spotify.net/artifactory",
    "client_artifactory": "${artifactory}/client-infrastructure",
    "~": [
     {
      "id": "boost",
      "path": "binaries/boost",
      "type": "url",
      "url": "${client_artifactory}/boost/${version}/${package_id}.zip",
      "version": "1_53_0",
      "~": [
       {
        "os": "linux",
        "package_id": "boost_${version}-${os}-gcc-x86_64-static_libs"
       },
       {
        "os": "osx",
        "package_id": "boost_${version}-${os}-clang-x86-static_libs"
       },
       {
        "os": "win32",
        "package_id": "boost_${version}-${os}-vs-x86-static_libs"
       }
      ]
     }
    ]
   }
  ]
 }

Several libraries, default arguments are inherited
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The command line would be: "$ vulcan.py"

 {
  "dependencies": [
   {
    "DESCRIPTION": "root node, default arguments for everything",
    "artifactory": "https://artifactory.spotify.net/artifactory",
    "client_artifactory": "${artifactory}/client-infrastructure",
    "server": "https://binaries.spotify.net",
    "type": "url",
    "url": "${server}/${id}/${package_id}.zip",
    "~": [
     {
      "DESCRIPTION": "openssl node",
      "id": "openssl",
      "os": "win32",
      "package_id": "${id}-unknown-${os}",
      "path": "binaries/${id}-${os}"
     },
     {
      "DESCRIPTION": "base node for apps",
      "id": "app_${name}",
      "name_base": "${name}",
      "package_id": "${id}-${version}",
      "path": "binaries/apps/${name}",
      "url": "${server}/app_${name_base}/${package_id}.zip",
      "~": [
       {
        "name": "resources.0",
        "version": "7e69eb2"
       },
       {
        "name": "playlist-framework.0",
        "name_base": "playlist",
        "version": "ce84793"
       }
      ]
     },
     {
      "DESCRIPTION": "base node for apps in artifactory",
      "branch": "master",
      "id": "${name}.${major}",
      "path": "binaries/apps/${id}/${id}.spa",
      "check_package_id": "false",
      "action": "copy",
      "~": [
       {
        "DESCRIPTION": "base node for frameworks in artifactory",
        "url": "${client_artifactory}/stitch-frameworks/${name}/${branch}/${version}/${name}.${version}.${branch}.${build}.spa",
        "~": [
         {
          "build": "9c92586.1224",
          "major": "1",
          "name": "api",
          "package_id": "null",
          "version": "1.28.0"
         }
        ]
       }
      ]
     }
    ]
   }
  ]
 }
